print(sir_graph)
if (greater_than_thirty_days){
print("We reached the peak amount of infected people after thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
} else {
print("We reached the peak amount of infected people before thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
}
Sys.sleep(5)
}
random_complex <- function(){
x_complex <- runif(1, min=0.01, max=0.05)
y_complex <- runif(1, min=0.05, max=0.05)
complex_number <- complex(real = x_complex, imaginary =  y_complex)
cat(typeof(complex_number))
return(complex_number)
}
beta <- Re(random_complex())
gamma <- Re(random_complex())
while (gamma > beta){
gamma <- Re(random_complex())
}
parameters_values <- c(
beta, #Our Infection Rate
gamma #Our Recovery Rate
)
sir_model <- function(time, province, parameters) {
with(as.list(c(province,parameters)), {
dS <- -beta * S * I / N #getting dS/dt
dI <- beta * S * I / N - gamma * I #getting dI/dt
dR <- gamma * I #getting dR/dt
return(list(c(dS, dI, dR)))
})
}
time_values <- seq(0, 1000)
#the period in which we can see the infected and susceptible and recovered change in numbers.
days_observed <- length(instances$ObservationDate)
#I was curious to see how changing the SIR numbers affected the SIR graph. So I made a for loop that went through instances to use different values to see if we got different outcomes.
for(i in seq(from = 2, to = days_observed, by = 10)){
R <- instances[i,"Recovered"]
I <- instances[i, "Confirmed"]
S <- N - I
initial_values <- c(
S = S,
I = I,
R = R
)
#ode is a part of desolve, which allows us to solve the differential equations needed for the SIR model. We can do it within R.
sir_values <- as.data.frame(ode(
y = initial_values,
times = time_values,
func = sir_model,
parms = parameters_values
))
#We are making it into a data frame so we can use ggplot to plot this on a graph.
sir_value_full <- melt(as.data.frame(sir_values), id="time")
sir_value_full
#For my own curious brain, and to see if the amount of days change and when.
index <- which.max(sir_values$I)
infected_number <- sir_values$I[index]
infected_time <- sir_values$time[index]
greater_than_thirty_days <- infected_time > 30
#This is who we graph. Data is what data frame we are using, aes is what we are using to plot our x and y
sir_graph <- ggplot(data = sir_value_full, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(title = "SIR Model",
x = x_axis, y = y_axis, color = "Compartment") +
theme_classic() +
geom_line(linewidth = 1) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 7500000, by = 500000)) +
theme(axis.title.y = element_text(margin = margin(r = 10)))
print(sir_graph)
if (greater_than_thirty_days){
print("We reached the peak amount of infected people after thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
} else {
print("We reached the peak amount of infected people before thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
}
Sys.sleep(5)
}
random_complex <- function(){
x_complex <- runif(1, min=0.05, max=2)
y_complex <- runif(1, min=0.05, max=2)
complex_number <- complex(real = x_complex, imaginary =  y_complex)
cat(typeof(complex_number))
return(complex_number)
}
beta <- Re(random_complex())
gamma <- Re(random_complex())
while (gamma > beta){
gamma <- Re(random_complex())
}
parameters_values <- c(
beta, #Our Infection Rate
gamma #Our Recovery Rate
)
sir_model <- function(time, province, parameters) {
with(as.list(c(province,parameters)), {
dS <- -beta * S * I / N #getting dS/dt
dI <- beta * S * I / N - gamma * I #getting dI/dt
dR <- gamma * I #getting dR/dt
return(list(c(dS, dI, dR)))
})
}
time_values <- seq(0, 1000)
#the period in which we can see the infected and susceptible and recovered change in numbers.
days_observed <- length(instances$ObservationDate)
#I was curious to see how changing the SIR numbers affected the SIR graph. So I made a for loop that went through instances to use different values to see if we got different outcomes.
for(i in seq(from = 2, to = days_observed, by = 10)){
R <- instances[i,"Recovered"]
I <- instances[i, "Confirmed"]
S <- N - I
initial_values <- c(
S = S,
I = I,
R = R
)
#ode is a part of desolve, which allows us to solve the differential equations needed for the SIR model. We can do it within R.
sir_values <- as.data.frame(ode(
y = initial_values,
times = time_values,
func = sir_model,
parms = parameters_values
))
#We are making it into a data frame so we can use ggplot to plot this on a graph.
sir_value_full <- melt(as.data.frame(sir_values), id="time")
sir_value_full
#For my own curious brain, and to see if the amount of days change and when.
index <- which.max(sir_values$I)
infected_number <- sir_values$I[index]
infected_time <- sir_values$time[index]
greater_than_thirty_days <- infected_time > 30
#This is who we graph. Data is what data frame we are using, aes is what we are using to plot our x and y
sir_graph <- ggplot(data = sir_value_full, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(title = "SIR Model",
x = x_axis, y = y_axis, color = "Compartment") +
theme_classic() +
geom_line(linewidth = 1) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 7500000, by = 500000)) +
theme(axis.title.y = element_text(margin = margin(r = 10)))
print(sir_graph)
if (greater_than_thirty_days){
print("We reached the peak amount of infected people after thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
} else {
print("We reached the peak amount of infected people before thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
}
Sys.sleep(5)
}
random_complex <- function(){
x_complex <- runif(1, min=0.05, max=2)
y_complex <- runif(1, min=0.05, max=2)
complex_number <- complex(real = x_complex, imaginary =  y_complex)
cat(typeof(complex_number))
return(complex_number)
}
beta <- Re(random_complex())
gamma <- Re(random_complex())
while (gamma > beta){
gamma <- Re(random_complex())
}
parameters_values <- c(
beta, #Our Infection Rate
gamma #Our Recovery Rate
)
sir_model <- function(time, province, parameters) {
with(as.list(c(province,parameters)), {
dS <- -beta * S * I / N #getting dS/dt
dI <- beta * S * I / N - gamma * I #getting dI/dt
dR <- gamma * I #getting dR/dt
return(list(c(dS, dI, dR)))
})
}
time_values <- seq(0, 100)
#the period in which we can see the infected and susceptible and recovered change in numbers.
days_observed <- length(instances$ObservationDate)
#I was curious to see how changing the SIR numbers affected the SIR graph. So I made a for loop that went through instances to use different values to see if we got different outcomes.
for(i in seq(from = 2, to = days_observed, by = 10)){
R <- instances[i,"Recovered"]
I <- instances[i, "Confirmed"]
S <- N - I
initial_values <- c(
S = S,
I = I,
R = R
)
#ode is a part of desolve, which allows us to solve the differential equations needed for the SIR model. We can do it within R.
sir_values <- as.data.frame(ode(
y = initial_values,
times = time_values,
func = sir_model,
parms = parameters_values
))
#We are making it into a data frame so we can use ggplot to plot this on a graph.
sir_value_full <- melt(as.data.frame(sir_values), id="time")
sir_value_full
#For my own curious brain, and to see if the amount of days change and when.
index <- which.max(sir_values$I)
infected_number <- sir_values$I[index]
infected_time <- sir_values$time[index]
greater_than_thirty_days <- infected_time > 30
#This is who we graph. Data is what data frame we are using, aes is what we are using to plot our x and y
sir_graph <- ggplot(data = sir_value_full, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(title = "SIR Model",
x = x_axis, y = y_axis, color = "Compartment") +
theme_classic() +
geom_line(linewidth = 1) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 7500000, by = 500000)) +
theme(axis.title.y = element_text(margin = margin(r = 10)))
print(sir_graph)
if (greater_than_thirty_days){
print("We reached the peak amount of infected people after thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
} else {
print("We reached the peak amount of infected people before thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
}
Sys.sleep(5)
}
random_complex <- function(){
x_complex <- runif(1, min=0.05, max=2)
y_complex <- runif(1, min=0.05, max=2)
complex_number <- complex(real = x_complex, imaginary =  y_complex)
cat(typeof(complex_number))
return(complex_number)
}
beta <- Re(random_complex())
gamma <- Re(random_complex()) * .5
while (gamma > beta){
gamma <- Re(random_complex())
}
parameters_values <- c(
beta, #Our Infection Rate
gamma #Our Recovery Rate
)
sir_model <- function(time, province, parameters) {
with(as.list(c(province,parameters)), {
dS <- -beta * S * I / N #getting dS/dt
dI <- beta * S * I / N - gamma * I #getting dI/dt
dR <- gamma * I #getting dR/dt
return(list(c(dS, dI, dR)))
})
}
time_values <- seq(0, 100)
#the period in which we can see the infected and susceptible and recovered change in numbers.
days_observed <- length(instances$ObservationDate)
#I was curious to see how changing the SIR numbers affected the SIR graph. So I made a for loop that went through instances to use different values to see if we got different outcomes.
for(i in seq(from = 2, to = days_observed, by = 10)){
R <- instances[i,"Recovered"]
I <- instances[i, "Confirmed"]
S <- N - I
initial_values <- c(
S = S,
I = I,
R = R
)
#ode is a part of desolve, which allows us to solve the differential equations needed for the SIR model. We can do it within R.
sir_values <- as.data.frame(ode(
y = initial_values,
times = time_values,
func = sir_model,
parms = parameters_values
))
#We are making it into a data frame so we can use ggplot to plot this on a graph.
sir_value_full <- melt(as.data.frame(sir_values), id="time")
sir_value_full
#For my own curious brain, and to see if the amount of days change and when.
index <- which.max(sir_values$I)
infected_number <- sir_values$I[index]
infected_time <- sir_values$time[index]
greater_than_thirty_days <- infected_time > 30
#This is who we graph. Data is what data frame we are using, aes is what we are using to plot our x and y
sir_graph <- ggplot(data = sir_value_full, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(title = "SIR Model",
x = x_axis, y = y_axis, color = "Compartment") +
theme_classic() +
geom_line(linewidth = 1) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 7500000, by = 500000)) +
theme(axis.title.y = element_text(margin = margin(r = 10)))
print(sir_graph)
if (greater_than_thirty_days){
print("We reached the peak amount of infected people after thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
} else {
print("We reached the peak amount of infected people before thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
}
Sys.sleep(5)
}
time_values <- seq(0, 200)
#the period in which we can see the infected and susceptible and recovered change in numbers.
days_observed <- length(instances$ObservationDate)
#I was curious to see how changing the SIR numbers affected the SIR graph. So I made a for loop that went through instances to use different values to see if we got different outcomes.
for(i in seq(from = 2, to = days_observed, by = 10)){
R <- instances[i,"Recovered"]
I <- instances[i, "Confirmed"]
S <- N - I
initial_values <- c(
S = S,
I = I,
R = R
)
#ode is a part of desolve, which allows us to solve the differential equations needed for the SIR model. We can do it within R.
sir_values <- as.data.frame(ode(
y = initial_values,
times = time_values,
func = sir_model,
parms = parameters_values
))
#We are making it into a data frame so we can use ggplot to plot this on a graph.
sir_value_full <- melt(as.data.frame(sir_values), id="time")
sir_value_full
#For my own curious brain, and to see if the amount of days change and when.
index <- which.max(sir_values$I)
infected_number <- sir_values$I[index]
infected_time <- sir_values$time[index]
greater_than_thirty_days <- infected_time > 30
#This is who we graph. Data is what data frame we are using, aes is what we are using to plot our x and y
sir_graph <- ggplot(data = sir_value_full, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(title = "SIR Model",
x = x_axis, y = y_axis, color = "Compartment") +
theme_classic() +
geom_line(linewidth = 1) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 7500000, by = 500000)) +
theme(axis.title.y = element_text(margin = margin(r = 10)))
print(sir_graph)
if (greater_than_thirty_days){
print("We reached the peak amount of infected people after thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
} else {
print("We reached the peak amount of infected people before thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
}
Sys.sleep(5)
}
x_axis <- "Time in Days"
y_axis <- "Number of People"
data.frame(instances)
N <- 7509200
random_complex <- function(){
x_complex <- runif(1, min=0.05, max=2)
y_complex <- runif(1, min=0.05, max=2)
complex_number <- complex(real = x_complex, imaginary =  y_complex)
cat(typeof(complex_number))
return(complex_number)
}
beta <- Re(random_complex())
gamma <- Re(random_complex()) * .5
while (gamma > beta){
gamma <- Re(random_complex())
}
parameters_values <- c(
beta, #Our Infection Rate
gamma #Our Recovery Rate
)
sir_model <- function(time, province, parameters) {
with(as.list(c(province,parameters)), {
dS <- -beta * S * I / N #getting dS/dt
dI <- beta * S * I / N - gamma * I #getting dI/dt
dR <- gamma * I #getting dR/dt
return(list(c(dS, dI, dR)))
})
}
time_values <- seq(0, 200)
#the period in which we can see the infected and susceptible and recovered change in numbers.
days_observed <- length(instances$ObservationDate)
#I was curious to see how changing the SIR numbers affected the SIR graph. So I made a for loop that went through instances to use different values to see if we got different outcomes.
for(i in seq(from = 2, to = days_observed, by = 10)){
R <- instances[i,"Recovered"]
I <- instances[i, "Confirmed"]
S <- N - I
initial_values <- c(
S = S,
I = I,
R = R
)
#ode is a part of desolve, which allows us to solve the differential equations needed for the SIR model. We can do it within R.
sir_values <- as.data.frame(ode(
y = initial_values,
times = time_values,
func = sir_model,
parms = parameters_values
))
#We are making it into a data frame so we can use ggplot to plot this on a graph.
sir_value_full <- melt(as.data.frame(sir_values), id="time")
sir_value_full
#For my own curious brain, and to see if the amount of days change and when.
index <- which.max(sir_values$I)
infected_number <- sir_values$I[index]
infected_time <- sir_values$time[index]
greater_than_thirty_days <- infected_time > 30
#This is who we graph. Data is what data frame we are using, aes is what we are using to plot our x and y
sir_graph <- ggplot(data = sir_value_full, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(title = "SIR Model",
x = x_axis, y = y_axis, color = "Compartment") +
theme_classic() +
geom_line(linewidth = 1) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 7500000, by = 500000)) +
theme(axis.title.y = element_text(margin = margin(r = 10)))
print(sir_graph)
if (greater_than_thirty_days){
print("We reached the peak amount of infected people after thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
} else {
print("We reached the peak amount of infected people before thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
}
Sys.sleep(5)
}
random_complex <- function(){
x_complex <- runif(1, min=0.5, max=2)
y_complex <- runif(1, min=0.5, max=2)
complex_number <- complex(real = x_complex, imaginary =  y_complex)
cat(typeof(complex_number))
return(complex_number)
}
beta <- Re(random_complex())
gamma <- Re(random_complex()) * .5
while (gamma > beta){
gamma <- Re(random_complex()) *.5
}
parameters_values <- c(
beta, #Our Infection Rate
gamma #Our Recovery Rate
)
sir_model <- function(time, province, parameters) {
with(as.list(c(province,parameters)), {
dS <- -beta * S * I / N #getting dS/dt
dI <- beta * S * I / N - gamma * I #getting dI/dt
dR <- gamma * I #getting dR/dt
return(list(c(dS, dI, dR)))
})
}
time_values <- seq(0, 200)
#the period in which we can see the infected and susceptible and recovered change in numbers.
days_observed <- length(instances$ObservationDate)
#I was curious to see how changing the SIR numbers affected the SIR graph. So I made a for loop that went through instances to use different values to see if we got different outcomes.
for(i in seq(from = 2, to = days_observed, by = 10)){
R <- instances[i,"Recovered"]
I <- instances[i, "Confirmed"]
S <- N - I
initial_values <- c(
S = S,
I = I,
R = R
)
#ode is a part of desolve, which allows us to solve the differential equations needed for the SIR model. We can do it within R.
sir_values <- as.data.frame(ode(
y = initial_values,
times = time_values,
func = sir_model,
parms = parameters_values
))
#We are making it into a data frame so we can use ggplot to plot this on a graph.
sir_value_full <- melt(as.data.frame(sir_values), id="time")
sir_value_full
#For my own curious brain, and to see if the amount of days change and when.
index <- which.max(sir_values$I)
infected_number <- sir_values$I[index]
infected_time <- sir_values$time[index]
greater_than_thirty_days <- infected_time > 30
#This is who we graph. Data is what data frame we are using, aes is what we are using to plot our x and y
sir_graph <- ggplot(data = sir_value_full, aes(x = time, y = value, color = variable)) +
geom_line() +
labs(title = "SIR Model",
x = x_axis, y = y_axis, color = "Compartment") +
theme_classic() +
geom_line(linewidth = 1) +
scale_y_continuous(labels = scales::comma,
breaks = seq(0, 7500000, by = 500000)) +
theme(axis.title.y = element_text(margin = margin(r = 10)))
print(sir_graph)
if (greater_than_thirty_days){
print("We reached the peak amount of infected people after thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
} else {
print("We reached the peak amount of infected people before thirty days")
print(paste("It took ", infected_time, "days to reach the peak of the amount of infected people."))
cat("\n")
}
Sys.sleep(5)
}
Rversion
R.version
